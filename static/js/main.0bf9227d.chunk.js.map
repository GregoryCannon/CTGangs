{"version":3,"sources":["matcher/OptimalMatcher.js","sheet-parser/sheet-parser.js","components/ResultDisplay.tsx","components/InputForm.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["__spreadArrays","this","s","i","il","arguments","length","r","Array","k","a","j","jl","exports","__esModule","getPairings","munkres","require","DUMMY_PLAYER","id","name","rating","gangName","canPlay","aPlayer","bPlayer","Math","abs","benchPlayer","player","pairing","benchedPlayers","push","playerData","legalSubstitutions","getOpponent","_i","_a","pairs","pair","console","log","listA","listB","costMatrix","map","getCostMatrix","rawResult","rawResult_1","rawPair","_loop_1","benchPlayer_1","possibleSubs_1","filter","x","possibleSub","possibleOpponent","undefined","_b","fetchSpreadsheetData","fetch","callback","then","res","text","body","rawString","newString","finalRows","replace","split","row","slice","formatSheetsData","entry","ResultDisplay","props","className","result","benchedPlayer","sub","InputForm","state","challengingGangPlayersText","defendingGangPlayersText","statusText","handleDefendingGangPlayersChanged","bind","handleChallengingGangPlayersChanged","handleSubmit","event","setState","target","value","preventDefault","spreadsheetPlayerData","challengingPlayerData","filterPlayerData","defendingPlayerData","submitFunction","textareaInput","playerNames","filteredPlayerData","invalidPlayerNames","playerName","filtered","trim","toUpperCase","join","onSubmit","onChange","type","Component","NO_RESULT","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0bf9227d.chunk.js","sourcesContent":["\"use strict\";\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nexports.__esModule = true;\r\nexports.getPairings = void 0;\r\nvar munkres = require(\"munkres-js\");\r\nvar DUMMY_PLAYER = {\r\n    id: -1,\r\n    name: \"dummy player\",\r\n    rating: -1,\r\n    gangName: \"\"\r\n};\r\nvar NON_MATCH_COST = 10000; // The penalty if an two players who can't play are matched (i.e. they both get benched)\r\nvar ALLOWED_RATING_GAP = 200;\r\nfunction canPlay(aPlayer, bPlayer) {\r\n    return Math.abs(aPlayer.rating - bPlayer.rating) <= ALLOWED_RATING_GAP;\r\n}\r\nfunction benchPlayer(player, pairing) {\r\n    pairing.benchedPlayers.push({\r\n        playerData: player,\r\n        legalSubstitutions: []\r\n    });\r\n}\r\nfunction getCostMatrix(listA, listB) {\r\n    // The top level of the matrix is the rows, and the second level down is the columns.\r\n    return listA.map(function (aPlayer) {\r\n        // Create row\r\n        return listB.map(function (bPlayer) {\r\n            // Create columns within row\r\n            return canPlay(aPlayer, bPlayer)\r\n                ? Math.abs(bPlayer.rating - aPlayer.rating)\r\n                : NON_MATCH_COST;\r\n        });\r\n    });\r\n}\r\nfunction getOpponent(player, pairing) {\r\n    for (var _i = 0, _a = pairing.pairs; _i < _a.length; _i++) {\r\n        var pair = _a[_i];\r\n        if (pair.aPlayer.id === player.id) {\r\n            return pair.bPlayer;\r\n        }\r\n        else if (pair.bPlayer.id === player.id) {\r\n            return pair.aPlayer;\r\n        }\r\n    }\r\n    console.log(\"No opponent found for\", player.name, \"id:\", player.id);\r\n}\r\nfunction getPairings(listA, listB) {\r\n    // Make the lists the same length\r\n    while (listA.length < listB.length) {\r\n        listA.push(DUMMY_PLAYER);\r\n    }\r\n    while (listB.length < listA.length) {\r\n        listB.push(DUMMY_PLAYER);\r\n    }\r\n    // Compute pairs using Munkres algorithm\r\n    var costMatrix = getCostMatrix(listA, listB);\r\n    var rawResult = munkres(costMatrix);\r\n    var pairing = {\r\n        pairs: [],\r\n        benchedPlayers: []\r\n    };\r\n    // Parse results into Pairing object\r\n    for (var _i = 0, rawResult_1 = rawResult; _i < rawResult_1.length; _i++) {\r\n        var rawPair = rawResult_1[_i];\r\n        var aPlayer = listA[rawPair[0]];\r\n        var bPlayer = listB[rawPair[1]];\r\n        if (aPlayer == DUMMY_PLAYER) {\r\n            benchPlayer(bPlayer, pairing);\r\n        }\r\n        else if (bPlayer == DUMMY_PLAYER) {\r\n            benchPlayer(aPlayer, pairing);\r\n        }\r\n        else if (canPlay(aPlayer, bPlayer)) {\r\n            // Pair the players\r\n            pairing.pairs.push({\r\n                aPlayer: aPlayer,\r\n                bPlayer: bPlayer\r\n            });\r\n        }\r\n        else {\r\n            // Bench both players\r\n            benchPlayer(aPlayer, pairing);\r\n            benchPlayer(bPlayer, pairing);\r\n        }\r\n    }\r\n    var _loop_1 = function (benchPlayer_1) {\r\n        var possibleSubs = __spreadArrays(listA, listB).filter(function (x) { return x.gangName === benchPlayer_1.playerData.gangName; });\r\n        for (var _i = 0, possibleSubs_1 = possibleSubs; _i < possibleSubs_1.length; _i++) {\r\n            var possibleSub = possibleSubs_1[_i];\r\n            var possibleOpponent = getOpponent(possibleSub, pairing);\r\n            if (benchPlayer_1.playerData.gangName == possibleSub.gangName &&\r\n                possibleOpponent !== undefined &&\r\n                canPlay(benchPlayer_1.playerData, possibleOpponent)) {\r\n                benchPlayer_1.legalSubstitutions.push(possibleSub);\r\n            }\r\n        }\r\n    };\r\n    for (var _a = 0, _b = pairing.benchedPlayers; _a < _b.length; _a++) {\r\n        var benchPlayer_1 = _b[_a];\r\n        _loop_1(benchPlayer_1);\r\n    }\r\n    return pairing;\r\n}\r\nexports.getPairings = getPairings;\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nexports.fetchSpreadsheetData = void 0;\r\nvar fetch = require(\"node-fetch\");\r\nfunction fetchSpreadsheetData(callback) {\r\n    fetch(\"https://docs.google.com/spreadsheets/u/0/d/1lSTbhpqodhqQn7Dg5cN-lcBavdOuimGOKFMg9tVhIMA/gviz/tq?tqx=out:html&tq&gid=1540266327\")\r\n        .then(function (res) { return res.text(); })\r\n        .then(function (body) {\r\n        callback(createPlayerList(formatSheetsData(body)));\r\n    });\r\n}\r\nexports.fetchSpreadsheetData = fetchSpreadsheetData;\r\nfunction createPlayerList(sheetsData) {\r\n    return sheetsData.map(function (entry) { return ({\r\n        id: entry[0],\r\n        name: entry[1],\r\n        gangName: entry[3],\r\n        rating: entry[8]\r\n    }); });\r\n}\r\nfunction formatSheetsData(rawString) {\r\n    var newString = rawString;\r\n    newString = newString.replace(/\\r?\\n|\\r/g, \"\");\r\n    newString = newString.replace(/<tr style=\"background-color: #f0f0f0\">/g, \"<tr>\");\r\n    newString = newString.replace(/<tr style=\"background-color: #ffffff\">/g, \"<tr>\");\r\n    newString = newString.replace(/<td align=\"right\">/g, \"<td>\");\r\n    newString = newString.replace(/<\\/tr>/g, \"\");\r\n    // Cut off the start and end junk\r\n    newString = newString.split(\"@ Join</td>\")[1];\r\n    newString = newString.split(\"</table></body>\")[0];\r\n    var rawRows = newString.split(\"<tr>\").filter(function (x) { return x.length > 0; });\r\n    var finalRows = rawRows.map(function (row) {\r\n        return row.split(/<td>|<\\/td><td>|<\\/td>/).slice(1);\r\n    });\r\n    finalRows = finalRows.filter(function (row) { return row[1] !== \"&nbsp;\"; });\r\n    return finalRows;\r\n}\r\n// fetchSpreadsheetData((result: any) => {\r\n//   console.log(result);\r\n// });\r\n","import React from \"react\";\r\nimport \"./ResultDisplay.css\";\r\nimport {\r\n  Pairing,\r\n  Pair,\r\n  BenchedPlayer,\r\n  PlayerData,\r\n} from \"../matcher/OptimalMatcher\";\r\n\r\ninterface ResultDisplayProps {\r\n  result: Pairing;\r\n}\r\n\r\nexport function ResultDisplay(props: ResultDisplayProps) {\r\n  console.log(\"ResultDisplay props\", props);\r\n  return (\r\n    <div className=\"result-container\">\r\n      <h2 id=\"result-title\">Results</h2>\r\n\r\n      {/* Matches */}\r\n      <h3 className=\"result-section-title\">Matches</h3>\r\n      {props.result.pairs.length > 0 ? (\r\n        <table id=\"matches-table\">\r\n          <tbody>\r\n            {props.result.pairs.map((pair: Pair) => (\r\n              <tr>\r\n                <td>{pair.aPlayer.name + \" vs. \" + pair.bPlayer.name}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      ) : (\r\n        <em>No matches possible!</em>\r\n      )}\r\n\r\n      {/* Benched Players */}\r\n      {props.result.benchedPlayers.length > 0 ? (\r\n        <div>\r\n          <h3 className=\"result-section-title\">Benched Players</h3>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Player</th>\r\n                <th>Gang</th>\r\n                <th>Could Sub For</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {props.result.benchedPlayers.map(\r\n                (benchedPlayer: BenchedPlayer) => (\r\n                  <tr>\r\n                    <td>{benchedPlayer.playerData.name}</td>\r\n                    <td>{benchedPlayer.playerData.gangName}</td>\r\n                    <td>\r\n                      {benchedPlayer.legalSubstitutions.length > 0 ? (\r\n                        benchedPlayer.legalSubstitutions.map(\r\n                          (sub: PlayerData) => <div>{sub.name}</div>\r\n                        )\r\n                      ) : (\r\n                        <em>None possible</em>\r\n                      )}\r\n                    </td>\r\n                  </tr>\r\n                )\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      ) : (\r\n        <div />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./InputForm.css\";\r\nimport { PlayerData } from \"../matcher/OptimalMatcher\";\r\nimport { fetchSpreadsheetData } from \"../sheet-parser/sheet-parser\";\r\n\r\ninterface InputFormProps {\r\n  submitFunction: Function;\r\n}\r\n\r\ninterface InputFormState {\r\n  challengingGangPlayersText: string;\r\n  defendingGangPlayersText: string;\r\n  statusText: string;\r\n}\r\n\r\nclass InputForm extends Component<InputFormProps, InputFormState> {\r\n  constructor(props: InputFormProps) {\r\n    super(props);\r\n    this.state = {\r\n      challengingGangPlayersText: \"\",\r\n      defendingGangPlayersText: \"\",\r\n      statusText: \"\",\r\n    };\r\n    this.handleDefendingGangPlayersChanged = this.handleDefendingGangPlayersChanged.bind(\r\n      this\r\n    );\r\n    this.handleChallengingGangPlayersChanged = this.handleChallengingGangPlayersChanged.bind(\r\n      this\r\n    );\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChallengingGangPlayersChanged(event: any) {\r\n    this.setState({ challengingGangPlayersText: event.target.value });\r\n  }\r\n\r\n  handleDefendingGangPlayersChanged(event: any) {\r\n    this.setState({ defendingGangPlayersText: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event: any) {\r\n    event.preventDefault();\r\n\r\n    // Fetch the player data from the spreadsheet\r\n    fetchSpreadsheetData((spreadsheetPlayerData: Array<PlayerData>) => {\r\n      console.log(\"\\n\\n Spreadsheet player data:\", spreadsheetPlayerData);\r\n      const challengingPlayerData = this.filterPlayerData(\r\n        this.state.challengingGangPlayersText,\r\n        spreadsheetPlayerData\r\n      );\r\n      const defendingPlayerData = this.filterPlayerData(\r\n        this.state.defendingGangPlayersText,\r\n        spreadsheetPlayerData\r\n      );\r\n\r\n      this.props.submitFunction(challengingPlayerData, defendingPlayerData);\r\n    });\r\n  }\r\n\r\n  filterPlayerData(\r\n    textareaInput: string,\r\n    spreadsheetPlayerData: Array<PlayerData>\r\n  ): Array<PlayerData> {\r\n    const playerNames = textareaInput.split(/\\n|,/).filter((x) => x.length > 0);\r\n    const filteredPlayerData = [];\r\n    const invalidPlayerNames = [];\r\n\r\n    // Match the entered player names with their player data when possible\r\n    for (let playerName of playerNames) {\r\n      const filtered = spreadsheetPlayerData.filter(\r\n        (x) => x.name.trim().toUpperCase() === playerName.trim().toUpperCase()\r\n      );\r\n      if (filtered.length === 1) {\r\n        filteredPlayerData.push(filtered[0]);\r\n      } else {\r\n        invalidPlayerNames.push(playerName);\r\n      }\r\n    }\r\n\r\n    // Show error message if there were invalid player names\r\n    if (invalidPlayerNames.length > 0) {\r\n      this.setState({\r\n        statusText:\r\n          \"Unable to find spreadsheet data for: \" +\r\n          invalidPlayerNames.join(\", \"),\r\n      });\r\n    }\r\n\r\n    return filteredPlayerData;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"form-container\">\r\n        <p id=\"status-text\">{this.state.statusText}</p>\r\n        <form id=\"main-form\" onSubmit={this.handleSubmit}>\r\n          {/* Player list for challenging gang */}\r\n          <div className=\"main-label\">Participants from Challenging Gang</div>\r\n          <div className=\"secondary-label\">\r\n            Put newlines or commas between names\r\n          </div>\r\n          <textarea\r\n            className=\"participant-list-textarea\"\r\n            onChange={this.handleChallengingGangPlayersChanged}\r\n          ></textarea>\r\n\r\n          {/* Player list for defending gang */}\r\n          <div className=\"main-label\">Participants from Defending Gang</div>\r\n          <div className=\"secondary-label\">\r\n            Put newlines or commas between names\r\n          </div>\r\n          <textarea\r\n            className=\"participant-list-textarea\"\r\n            onChange={this.handleDefendingGangPlayersChanged}\r\n          ></textarea>\r\n\r\n          <input id=\"submit-button\" type=\"submit\" value=\"Get Matches!\"></input>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputForm;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { getPairings, PlayerData, Pairing } from \"../matcher/OptimalMatcher\";\r\nimport { ResultDisplay } from \"./ResultDisplay\";\r\nimport InputForm from \"./InputForm\";\r\n\r\ninterface AppState {\r\n  result: Pairing;\r\n}\r\n\r\nconst NO_RESULT: Pairing = { pairs: [], benchedPlayers: [] };\r\n\r\nclass App extends Component<{}, AppState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = {\r\n      result: NO_RESULT,\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(\r\n    challengingPlayerData: Array<PlayerData>,\r\n    defendingPlayerData: Array<PlayerData>\r\n  ) {\r\n    const result = getPairings(challengingPlayerData, defendingPlayerData);\r\n    this.setState({\r\n      result,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <p>Welcome to Classic Tetris Gangs!</p>\r\n        </header>\r\n\r\n        <div id=\"page-body\">\r\n          <InputForm submitFunction={this.handleSubmit} />\r\n\r\n          {/* Results output area */}\r\n          {this.state.result == NO_RESULT ? (\r\n            <div />\r\n          ) : (\r\n            <div>\r\n              <ResultDisplay result={this.state.result} />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}